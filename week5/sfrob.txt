In the previous homework, we wrote sfrob.c 
to use the buffer rather than the system call, but
we allocated memory every time we read in a character
so we might expect some slow down.
For this week, we wrote sfrobu.c


First I create a file with one line of text:

*~BO  *{_CIA *hXE]D *LER #@_GZY #E\\OX #^BO #FKPS #NEM\4

Next I multiplied its contend 100,000; 10,000; 1000; 100 and output it 
to input_large4.txt, input_large3.txt, input_large2.txt, input_large1.txt 

while read line; do for i in {1..100000}; do echo "$line"
; done; done < input.txt >input_large.txt

Next 

1. Comparison between sfrob and sfrobu



sfrob	|	real(s)	|	user(s)	|	sys(s)	| 
| 100	|	0.005	|	0.001	|	0.003	|
|  1000	|	0.030	|	0.013	|	0.008	|
| 10000	|	0.504	|	0.108	|	0.043	|
| 100000|	6.298	|	0.931	|	0.393	|



sfrobu	|	real(s)	|	user(s)	|	sys(s)	| 
| 100	|	0.021	|	0.004	|	0.012	|
|  1000	|	0.213	|	0.013	|	0.110	|
| 10000	|	2.202	|	0.090	|	0.922	|
| 100000|	22.834	|	0.811	|	0.373	|



#Lines  | Comparisons
| 5		|	16
|  10	|	45
| 15	|	62
| 20	|	93
|  100	|	670
| 200	|	1539
| 500	|	4723
|  1000	|	9918
| 5000	|	61452

Clearly, comparison is nlogn with n is the number of input lines

2. Time comparison

Text file has 1000 lines

		    |	real(s)	|	user(s)	|	sys(s)	| 
| sfrob     |	0.023	|	0.010	|	0.013	|
| sfrobu	|	0.112	|	0.022	|	0.089	|
| sfrobs	|	0.030	|	0.018	|	0.018	|
| sfrobu -f	|	0.119	|	0.009	|	0.108	|
| sfrobs -f |	0.146	|	0.132	|	0.017	|


time ./sfrob <1000.txt >out.txt
time ./sfrobu <1000.txt >out.txt
time ./sfrobs <1000.txt >out.txt
time ./sfrobu -f <1000.txt >out.txt
time ./sfrobs -f <1000.txt >out.txt


Text file has 100,000 lines

		    |	real(s)	|	user(s)	|	sys(s)	| 
| sfrob     |	0.881	|	0.842	|	0.037	|
| sfrobu	|	5.764	|	0.791	|	4.969	|
| sfrobs	|	1.217	|	1.185	|	0.067	|
| sfrobu -f	|	5.685	|	0.853	|	4.827	|
| sfrobs -f |	10.363	|	10.333	|	0.059	|

We could clearly see that the unbuffered version was
the slowest, whereas the script version was a bit slower 
than the buffered version. Since we implemented quicksort
to do the sorting in buffered version, this could 
make a little faster than the script version using 
different type of sort.