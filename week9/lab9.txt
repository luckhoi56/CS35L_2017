Assignment 9: Change Management

I. Laboraroty: managing a backported change

1. get copy of the Diffutils from the main
website

$git clone https://git.savannah.gnu.org/git/diffutils.git

$cd diffutils

2. create log of changes
git log > git-log.txt

3. generate a list of tags


4. Find the commit,
generate a patch for that commit

Use vim to open the git-log.txt
and search for "maint: quote 'like this' 
or "like this", not `like this"
$vim git-log.txt
/maint: quote 'like this' or "like this", not `like this

$git show 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt

5.check out 3.0 version
I checkout into my own branch
$git checkout -b '2017_3.0' 'v3.0'

6. Apply patch
patch -p1 <quote-patch.txt

b. Problems:
Hunk #1 FAILED at 29.

1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej
patching file doc/diagmeet.note
can't find file to patch at input line 222

patching file README
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej

7. $git status

On branch 2017_3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   NEWS
        modified:   README
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff.h
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/system.h
        modified:   src/util.c
        modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        NEWS.orig
        README-hacking.orig
        README-hacking.rej
        README.orig
        README.rej
        cfg.mk.orig
        cfg.mk.rej
        git-log.txt
        git-tags.txt
        ms/config.site.orig
        quote-patch.txt
        src/cmp.c.orig
        src/context.c.orig
        src/diff.c.orig
        src/diff.c.rej
        src/diff.h.orig
        src/diff3.c.orig
        src/diff3.c.rej
        src/dir.c.orig
        src/sdiff.c.orig
        src/system.h.orig
        src/util.c.orig
        tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")

8. vc-revert:
revert the work file in the current VC
fileset to the last revision
diff mode :major mode used the output
(known as a patch)
vc-diff: compare the work
files in the current VC fileset with the version you 
started from (vc-diff)

9.For non .c extension file,
we only opened them using vc-diff (C-x v =) and 
then apply the vc-revert (C-x v u)
Enter yes
then C-x C-c to quit

-emacs NEWS 
-emacs README
-emacs TODO
emacs doc/diagmeet.note;
emacs ms/config.bat; 
emacs ms/config.site; 
emacs po/en.po;
emacs src/diff.h; 
emacs src/system.h; 
emacs tests/help-version

b. I then ran the following command to revert any changes
to comment hunks
emacs src/analyze.c
emacs src/cmp.c
emacs src/context.c
emacs src/diff.c   
emacs src/diff3.c
emacs src/dir.c
emacs src/ifdef.c
emacs src/io.c
emacs src/sdiff.c
emacs src/side.c
emacs src/util.c



I opened the vc-diff (C-x v=) to find changes

src/analyze.c : reverted all (C-x v u)
src/cmp.c : @36, @364, @377
src/context.c: reverted all
src/diff.c : @ 40, @57, @92
src/diff3.c: @35, @159, @1475
src/dir.c: @87, @125, @234
src/ifdef.c: reverted all
src/io.c: C-x v u
src/sdiff.c : @35, @92, @747
src/ side.c: C-x v u
src/util.c : @27,121,146,241,270,650


10. 
Here the strings did not match. I
First:
$emacs src/diff.c.rej 
$emacs src.diff3.c.rej

to look at what needed to change
Then I emacsed into the diff.c and
diff3.c to, use C-s to search for the right 
place and changed ` to '

11.Removed untracked file
$find . -type f -name '*.orig' -delete
$find . -type f -name '*.rej' -delete


12. $git status
#   modified:   src/cmp.c
#   modified:   src/diff.c
#   modified:   src/diff3.c
#   modified:   src/dir.c
#   modified:   src/sdiff.c
#   modified:   src/util.c

$git diff > quote-3.0-patch.txt
I emacs into the file, use M-> to the end of
the line, I counted there were only 327 lines,
which was in the expected range.

13. To build the modified version
Since I used lnxsrv03, I did not have to patch
the file, but in order to run the ./configure
I have to change
$PATH=/usr/local/cs/bin:$PATH
because help2man is in /usr/local/cs/bin


./bootstrap
./configure
make


Then I ran
$/src/diff .-
$./src/diff --help

it replaced the ` with '
which was correct

14. Sanity test

$cd ..
went out of the diffutils folder

I then clone the diffutils-3.0-orig

$git clone ~eggert/src/gnu/diffutils diffutils-3.0-orig


$git checkout 'v3.0'

cp ./src/*.c ../diffutils-3.0/
Copy the original source codes to diffutils-3.0



cp ./diffutils/src/*.c ./diffutils-3.0-patch/
Copy the patched source codes to diffutils-3.0-patch

./diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt
This was a patched diff

Now I compared two patches:
diff quote-3.0-test.txt diffutils/quote-3.0-patch.txt

The were many difference, I could see many change from ` to '. 
But overall, they did not differ in actual contents. The difference
was only from path of the files. I would say that the difference was
innocuous
