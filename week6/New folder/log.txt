Assignment 6 : Multithreaded performance

Part 1: Lab
First, I checked the version 
sort --version
sort (GNU coreutils) 8.4

The version of coreutils is the new version

Now I read some information about od command:
The od utility shall write the conetens of its
input files ti standard output in 
a user-specified format.

Single-precision floating point format occupy 4 bytes
in computer memory
Since we need to store a file containing 10,000,000 
random single-precision floating point number
. We must need at least 40,000,000 bytes
od -An -f -N 4000000 </dev/urandom

Explantion:
-An : to remove the address
-f : single precision floating point
-N : no more than bytes input

What I saw using VIM were 4 columns of floating point numbers,
there were spaces in between the numbers.
My goal was to transpose those spaces into newline.
I piped it with | tr -s ' ' '\n'
-s meant to de

We could use sed to delete empty line
sed '/^$/d' file
the ^s indicates the sed command to delete empty lines.
This sed command do not remove the lines that contain 
spaces, which was valid in this case


od -An -f -N 4000000 </dev/urandom | tr -s ' ' '\n'|
sed '/^$/d' >random.txt


Now I am ready to do the performance test

a. No using parallel
$time -p sort -g <random.txt >/dev/null
real 17.27
user 91.27
sys 0.85

b. parallel =1
$time -p sort -g --parallel=1 <random.txt >/dev/null
real 80.12
user 79.75
sys 0.35

c. parallel =2 
$time -p sort -g --parallel=2 <random.txt >/dev/null
real 42.65
user 80.63
sys 0.59

d. parallel =4 
$time -p sort -g --parallel=4 <random.txt >/dev/null
real 24.77
user 81.48
sys 0.68


e. parallel =8 
$time -p sort -g --parallel=8 <random.txt >/dev/null
real 17.26
user 91.87
sys 0.94

One thing to noticed was that the system time increased
as we put in more cores. This could be explained because more
cores could cause more system calls. Another thing to notice was
that the run time using 8 threads was similar to the command
without using parallel. This means that the sort without parallel
chose the 8 threads by default to the sorting.